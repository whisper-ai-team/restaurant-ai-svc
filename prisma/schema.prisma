generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BusinessAccountStatus {
  PENDING
  CONNECTED
  DISCONNECTED
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  WHATSAPP
  GOOGLE
  YELP
  OTHER
}

enum ReviewSentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

model BusinessAccount {
  id               String                  @id @default(uuid())
  name             String
  metaBusinessId   String?                 @unique
  configurationId  String?                 @unique
  redirectUri      String?
  status           BusinessAccountStatus   @default(PENDING)
  notes            String?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  metaDetails      BusinessMetaDetail?
  credentials      BusinessCredential?
  competitors      BusinessCompetitor[]
  socialReviews    BusinessSocialReview[]
}

model BusinessMetaDetail {
  id                String          @id @default(uuid())
  businessAccountId String          @unique
  legalName         String?
  primaryPageId     String?
  timezone          String?
  currency          String?
  website           String?
  industry          String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  phoneNumber       String?
  supportEmail      String?
  updatedAt         DateTime        @updatedAt
  createdAt         DateTime        @default(now())

  businessAccount BusinessAccount @relation(fields: [businessAccountId], references: [id], onDelete: Cascade)
}

model BusinessCompetitor {
  id                String          @id @default(uuid())
  businessAccountId String
  name              String
  facebookPageId    String?
  instagramHandle   String?
  website           String?
  notes             String?
  addedBy           String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  businessAccount BusinessAccount @relation(fields: [businessAccountId], references: [id], onDelete: Cascade)

  @@index([businessAccountId])
}

model BusinessCredential {
  id                String                @id @default(uuid())
  businessAccountId String                @unique
  systemUserToken   String
  tokenType         String                @default("SYSTEM_USER")
  expiresAt         DateTime?
  grantedScopes     String[]
  connectedAssets   Json?
  metaBusinessId    String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  businessAccount BusinessAccount @relation(fields: [businessAccountId], references: [id], onDelete: Cascade)
}

model BusinessSocialReview {
  id                String            @id @default(uuid())
  businessAccountId String
  platform          SocialPlatform
  reviewId          String?
  reviewerName      String?
  rating            Int?
  comment           String?
  permalink         String?
  postedAt          DateTime?
  sentiment         ReviewSentiment?
  metadata          Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  businessAccount BusinessAccount @relation(fields: [businessAccountId], references: [id], onDelete: Cascade)

  @@index([businessAccountId])
  @@index([platform])
}
